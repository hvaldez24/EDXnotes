III. PYTHON
A. What is Python?
    1. Powerful and quick language
    2. Has built in feature
B. First Program
SYNTAX:
print("Hello, World!")
prints a line of text inside the parentheses

C. VARIABLES
You do not have to specify the types of variables beign defined in PYTHON
Example:
    a = 25   - integer  int
    b = 1.5     - float float
    c = "Hello!"    - string str
    d = True        - boolean bool
    e = None        - NoneType None
D. Input function
    The function allows the user to type in an Input
    SYNTAX:
    input("Name: ")
    Example 1:
    name = input("Name: ") #Requires user input, and saved in the varialbe "name"
    print("Hello, " + name) #Prints the concantenated output of Hello and name

    Example 2: 
    print(f"Hello, {name}") #Prints the concantenated output of Hello and name
                    |__ Plugging the value of the variable

E.  Conditional Statements
    Example:
    n = input("Number: ")
    #Indetations is required in python to differentiate a statement from other parts of an if statement
    if n > 0:
        print("n is positive")
    elif n < 0
    print("n is negative")
    else:
    print("n is zero")

    If the code is run this message will appear:
    Number: 1
    Traceback (most recent call last):
    File "conditions.py", line 3, in <module>
        if n > 0:
    TypeError: '>' not supported between instances of 'str' and 'int'

    To resolved the error:
    By passing the value if input("Name: ") to an int, the value is converted
    to an integer:
    Example:
    n = int(input("Number: ")) 
    #converts the number typed in by user into a int

F.  Sequences
    
    1. SYNTAX:
    variable = "value"

    print(variable][0])
    |               |__ will obtain the the 1st element of a string which is 0
    |__ Will print the value of the 1st element of the variable  

    Example: 
    
    name = "Harry"

    print(name[1])

    Print:
    H
    2. Data Structures / Features

        a. List
        A sequence of mutable values
        SYNTAX
        
        variable = ["x", "y", "z"]

        function(variable[0])
                        |__ will obtain and index of the list
        *Lists use square brackets
        Example:

        names = ["Harry", "Ron", "Hermione"]

        print(names[0])

            i. Adding a new entry to the list
            SYNTAX:
            variable.append
                        |___ Adds a new entry to the list
            ii. Sorting the entries on a list
            SYNTAX:
            variable.sort()
                        |__ sorts the entries on a list into
                        alphabetical order.

        b. Tuple
        A sequence of immutable values, or values that cannot be changed.
        Grouping values together in one variable
        tupple use a parentheses
        SYNTAX:
        
        variable = (x, y)

        Example: 
        coordinateX = 10.0
        coordinateY = 20.0

        coordinate = (10.0, 20.0)
        c. list
        Organizes the values inside a variable into a list

        SYNTAX:
        variable = ["value_1", "value_2", "value_3", "value_4"]

        Example

        # Define a list of names
        names =  ["Harry" , "Ron", "Hermione", "Ginny"]

        names.append("Draco") # add an entry to the list 

        names.sort() # sort the list names alphabetically

        print(names)

        Output:

        ['Draco', 'Ginny', 'Harry', 'Hermione', 'Ron']

        c. set
        A collection of unique values
        data is not kept in a particular order
        Example:
        # Create an empty set
        s = set()

        # Add elements to a set
        s.add(1)
        s.add(2)
        s.add(3)
        s.add(4)

        s.remove(2)

        print(s)

        print(f"the set has {len(s)} elements") # WIll print the number of elements in the set
        # SYNTAX:
        # print(f"string element{len(variable)}")

        Output: 
        {1, 2, 3}
        the set has 3 elements

        # no repeated elements appear on the set.
        


        d. dict
        a data structure that is a collection of key-value pairs

        e. Loops
            
            i. for Loops
            SYNTAX: 
            for i variable[n1, n2, n3, n4, n5] #prints a sequence of numbers 1- 5
            Example:
            for i in [0, 1, 2, 3, 4, 5]
            print(i)

            Output:
            0
            1
            2
            3
            4
            5

            Example 2:
            # Uses range function to generate sequence of numbers
            for  i in range(6):
                print(i)
            
            Output:
            0
            1
            2
            3
            4
            5

            Example 3:
            #printing from a list of names
            names = ["Harry", "Hermione", "Ron"]

            for name in names:
                print(name)
            Output:

            Harry
            Hermione
            Ron

            Example 4:
            # prints the 
            name = "Harry"
            
            for character in name:
                print(character)
            
            Output:
            H
            a
            r
            r
            y
        
        f. Dictionaries

            # creating a new dictionary

            Example:
            houses = {"Harry": "Gryffindor", "Draco": "Slytherin"}

            houses["Hermione"] = "Gryffindor" # adds assigns the Hermione to Gryffindor

            print(houses["Harry"])
                #the square brackets is used to look up a specific element in a dictionary

        g. Functions

            i. how to define a Function
            SYNTAX:

            def square(x): # defines the function
            return x * x

            for i in range(10):
            print(f"The square of {i} is {square(i)}") #multiplies the i variable by itself for 10 times

            ii. how to import Functions
            SYNTAX:
            from functions import square
            #file from  squares.py
                for i in range(10):
                    print(f"The square of {i} is {square(i)}")
                    #running this function ny itself will results in an Exception:
                    #Traceback (most recent call last):
                    #File "D:\Desktop\EDX Courses\EDXnotes\squares.py", line 2, in <module>
                    #print(f"The square of {i} is {square(i)}")
                    #NameError: name 'square' is not defined
            Alternative SYNTAX:
            import functions / modules
            Code written by other programmers that were written by other people
            for i range(10):
                print(f"The square of {i} is {functions.square(i)}")
                
                Defining a function       
                #file from functions.py 
                    def square(x): # defines the function
                        return x * x   


        h. Object Oriented Programming
        Objects can store iformation, and execute programming

            i. How to create a class in python
            Class is a template for a type of object
            SYNTAX
            class Point():
            def __init__(self, x, y):
                self.x = x
                self.y = y
            # init function creates a point by storing 2 inputs insude an object
            # A class is define by this magic method. 
            # A function or method that will be automatically called once a new point is created
            # functions that operate on objects are called methods, and must take 1st argument self
            # represents the object that we are interacting with
            #data is stored into the point
            p = Point(2, 8)
            print(p.x)
            print(p.y)
            #the statement will access the data stored in x

            Output:
            2
            8
            >>>

            ii. Creating a class with an empty list
            Example:
            class Flight():
            def __init__(self, capacity):
                self.capacity = capacity
                self.passenger = [] # stores self.passengers to an empty list

            def add_passenger(self, name):
                if not self.open_seats(): #if statement whenever  not seats are available
                    return False
                self.passenger.append(name)
                return True
                
            
            def open_seats(self):
                return self.capacity - len(self.passenger)

            flight = Flight(3)

            people = ["Harry", "Ron", "Hermione", "Ginny"]
            for person in people:
                if flight.add_passenger(person):
                    print(f"Added {person} to flight successfully.")
                else:
                    print(f"No available seat for that {person}")
            

